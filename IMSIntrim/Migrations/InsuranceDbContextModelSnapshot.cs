// <auto-generated />
using System;
using IMSIntrim.Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IMSIntrim.Migrations
{
    [DbContext(typeof(InsuranceDbContext))]
    partial class InsuranceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IMSIntrim.Domain.Models.Agent", b =>
                {
                    b.Property<int>("AgentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgentId"));

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AgentId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("IMSIntrim.Domain.Models.AvailablePolicy", b =>
                {
                    b.Property<int>("AvailablePolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AvailablePolicyId"));

                    b.Property<decimal>("BasePremium")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("CoverageDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ValidityPeriod")
                        .HasColumnType("int");

                    b.HasKey("AvailablePolicyId");

                    b.ToTable("AvailablePolicies");
                });

            modelBuilder.Entity("IMSIntrim.Domain.Models.Claim", b =>
                {
                    b.Property<int>("ClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClaimId"));

                    b.Property<int?>("AgentId")
                        .HasColumnType("int");

                    b.Property<decimal>("ClaimAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FiledDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PolicyId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClaimId");

                    b.HasIndex("AgentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PolicyId");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("IMSIntrim.Domain.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomerId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("IMSIntrim.Domain.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<int?>("AgentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId");

                    b.HasIndex("AgentId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("IMSIntrim.Domain.Models.Policy", b =>
                {
                    b.Property<int>("PolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PolicyId"));

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<int>("AvailablePolicyId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PolicyId");

                    b.HasIndex("AgentId");

                    b.HasIndex("AvailablePolicyId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("IMSIntrim.Domain.Models.PolicyRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<int>("AvailablePolicyId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestId");

                    b.HasIndex("AvailablePolicyId");

                    b.HasIndex("CustomerId");

                    b.ToTable("PolicyRequests");
                });

            modelBuilder.Entity("IMSIntrim.Domain.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Agent"
                        });
                });

            modelBuilder.Entity("IMSIntrim.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5aadd958-329a-4f30-8075-c13f484f8476"),
                            IsDeleted = false,
                            PasswordHash = "$2a$11$HVMna.tWj8AO7CLHlqacJeZw1QFxjyDwxTtq2YkFX.o5soa4ipgcu",
                            Username = "Akash_1"
                        });
                });

            modelBuilder.Entity("IMSIntrim.Domain.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("5aadd958-329a-4f30-8075-c13f484f8476"),
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("IMSIntrim.Domain.Models.Agent", b =>
                {
                    b.HasOne("IMSIntrim.Domain.Models.User", "User")
                        .WithOne("Agent")
                        .HasForeignKey("IMSIntrim.Domain.Models.Agent", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IMSIntrim.Domain.Models.Claim", b =>
                {
                    b.HasOne("IMSIntrim.Domain.Models.Agent", "Agent")
                        .WithMany("FiledClaims")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IMSIntrim.Domain.Models.Customer", "Customer")
                        .WithMany("Claims")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IMSIntrim.Domain.Models.Policy", "Policy")
                        .WithMany("Claims")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Customer");

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("IMSIntrim.Domain.Models.Customer", b =>
                {
                    b.HasOne("IMSIntrim.Domain.Models.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("IMSIntrim.Domain.Models.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IMSIntrim.Domain.Models.Notification", b =>
                {
                    b.HasOne("IMSIntrim.Domain.Models.Agent", "Agent")
                        .WithMany("Notifications")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IMSIntrim.Domain.Models.Customer", "Customer")
                        .WithMany("Notifications")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Agent");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("IMSIntrim.Domain.Models.Policy", b =>
                {
                    b.HasOne("IMSIntrim.Domain.Models.Agent", "Agent")
                        .WithMany("AssignedPolicies")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IMSIntrim.Domain.Models.AvailablePolicy", "AvailablePolicy")
                        .WithMany("IssuedPolicies")
                        .HasForeignKey("AvailablePolicyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IMSIntrim.Domain.Models.Customer", "Customer")
                        .WithMany("Policies")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("AvailablePolicy");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("IMSIntrim.Domain.Models.PolicyRequest", b =>
                {
                    b.HasOne("IMSIntrim.Domain.Models.AvailablePolicy", "AvailablePolicy")
                        .WithMany("PolicyRequests")
                        .HasForeignKey("AvailablePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMSIntrim.Domain.Models.Customer", "Customer")
                        .WithMany("PolicyRequests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailablePolicy");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("IMSIntrim.Domain.Models.UserRole", b =>
                {
                    b.HasOne("IMSIntrim.Domain.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMSIntrim.Domain.Models.User", "User")
                        .WithOne("UserRole")
                        .HasForeignKey("IMSIntrim.Domain.Models.UserRole", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IMSIntrim.Domain.Models.Agent", b =>
                {
                    b.Navigation("AssignedPolicies");

                    b.Navigation("FiledClaims");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("IMSIntrim.Domain.Models.AvailablePolicy", b =>
                {
                    b.Navigation("IssuedPolicies");

                    b.Navigation("PolicyRequests");
                });

            modelBuilder.Entity("IMSIntrim.Domain.Models.Customer", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Notifications");

                    b.Navigation("Policies");

                    b.Navigation("PolicyRequests");
                });

            modelBuilder.Entity("IMSIntrim.Domain.Models.Policy", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("IMSIntrim.Domain.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("IMSIntrim.Domain.Models.User", b =>
                {
                    b.Navigation("Agent");

                    b.Navigation("Customer");

                    b.Navigation("UserRole");
                });
#pragma warning restore 612, 618
        }
    }
}
